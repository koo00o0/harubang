/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.76
 * Generated at: 2023-08-03 02:00:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.schedule;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class myDetailSchedule_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>하루방</title>\r\n");
      out.write("   <style>\r\n");
      out.write("      .title{\r\n");
      out.write("         text-align: center;\r\n");
      out.write("      }\r\n");
      out.write("      .wrap{\r\n");
      out.write("         display: flex;\r\n");
      out.write("         justify-content: center;\r\n");
      out.write("         align-items: center;\r\n");
      out.write("         text-align: center;\r\n");
      out.write("         flex-direction: column;      \r\n");
      out.write("      }\r\n");
      out.write("      \r\n");
      out.write("        table {\r\n");
      out.write("            border-collapse: collapse;\r\n");
      out.write("            width: 50%;\r\n");
      out.write("        }\r\n");
      out.write("        th, td {\r\n");
      out.write("            border: 1px solid black;\r\n");
      out.write("            padding: 8px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("        }\r\n");
      out.write("        th {\r\n");
      out.write("            background-color: #f2f2f2;\r\n");
      out.write("        }\r\n");
      out.write("        tr:hover {\r\n");
      out.write("            background-color: #f5f5f5;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("   ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/include/subtop.jsp", out, false);
      out.write("\r\n");
      out.write("   \r\n");
      out.write("   <h2 class=\"title\"></h2>\r\n");
      out.write("   \r\n");
      out.write("   <div class=\"wrap\">\r\n");
      out.write("      <h2 class=\"date\">동적 하루 일정표</h2>\r\n");
      out.write("       <table id=\"scheduleTable\">\r\n");
      out.write("           <tr>\r\n");
      out.write("               <th>장소명</th>\r\n");
      out.write("               <th>시작시간</th>\r\n");
      out.write("               <th>종료시간</th>\r\n");
      out.write("           </tr>\r\n");
      out.write("       </table>\r\n");
      out.write("   </div>\r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   <script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${path}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/js/jquery.min.js\"></script>\r\n");
      out.write("   <script>\r\n");
      out.write("   $(document).ready(function() {\r\n");
      out.write("       const dataFromPreviousPage = JSON.parse(localStorage.getItem(\"dataFromPreviousPage\"));\r\n");
      out.write("      \r\n");
      out.write("        var name = dataFromPreviousPage['scheduleName'];\r\n");
      out.write("        $(\".title\").text(name);\r\n");
      out.write("       // 데이터를 사용하여 원하는 작업 수행\r\n");
      out.write("       var detail = Object.keys(JSON.parse(dataFromPreviousPage['detailSchedule']));\r\n");
      out.write("        \r\n");
      out.write("       var innerHtml = \"\";\r\n");
      out.write("       for(var i = 0; i < detail.length; i++){\r\n");
      out.write("          innerHtml += '<h2>'+detail[i]+'</h2>';\r\n");
      out.write("          innerHtml += ' <table id=\"scheduleTable\">';\r\n");
      out.write("          innerHtml += '<tr>';\r\n");
      out.write("          innerHtml += '<th>장소명</th>';\r\n");
      out.write("          innerHtml += '<th>시작시간</th>';\r\n");
      out.write("          innerHtml += '<th>종료시간</th>';\r\n");
      out.write("          innerHtml += '</tr>';\r\n");
      out.write("          innerHtml += '</table>';\r\n");
      out.write("          $(\".wrap\").html(innerHtml);\r\n");
      out.write("          var newdetail = JSON.parse(dataFromPreviousPage['detailSchedule']);\r\n");
      out.write("          var scheduleData = newdetail[detail[i]];\r\n");
      out.write("          console.log(scheduleData);\r\n");
      out.write("          if(scheduleData.length != 0){\r\n");
      out.write("             for (var j = 0; j < scheduleData.length; j++) {\r\n");
      out.write("                  addScheduleToTable(scheduleData[j]);\r\n");
      out.write("\r\n");
      out.write("             }\r\n");
      out.write("          }\r\n");
      out.write("          \r\n");
      out.write("       }\r\n");
      out.write("         \r\n");
      out.write("         \r\n");
      out.write("       \r\n");
      out.write("       function addScheduleToTable(schedule) {\r\n");
      out.write("              var table = document.getElementById('scheduleTable');\r\n");
      out.write("            var row = table.insertRow(-1);\r\n");
      out.write("            var timeCell = row.insertCell(0);\r\n");
      out.write("            var eventCell = row.insertCell(1);\r\n");
      out.write("            var locationCell = row.insertCell(2);\r\n");
      out.write("            timeCell.innerHTML = schedule['text'];\r\n");
      out.write("            eventCell.innerHTML = schedule['startTime'];\r\n");
      out.write("            locationCell.innerHTML = schedule['endTime']; \r\n");
      out.write("        }\r\n");
      out.write(" \r\n");
      out.write("        // 일정 데이터 배열을 순회하며 테이블에 추가\r\n");
      out.write("        /* for (var i = 0; i < scheduleData.length; i++) {\r\n");
      out.write("            addScheduleToTable(scheduleData[i]);\r\n");
      out.write("        } */\r\n");
      out.write("       // ... (추가적인 작업)\r\n");
      out.write("\r\n");
      out.write("       // 작업이 끝난 후 웹 스토리지에서 데이터 제거 (선택적)\r\n");
      out.write("       localStorage.removeItem(\"dataFromPreviousPage\");\r\n");
      out.write("   });\r\n");
      out.write("   </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
